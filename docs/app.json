[{"name":"server.R","content":"library(shiny)\r\n\r\n\r\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))install.packages(\"BiocManager\")\r\n\r\nlibrary(BiocManager)\r\n\r\nif (!requireNamespace(\"MSstats\", quietly = TRUE)) BiocManager::install(\"MSstats\",force = TRUE)\r\nif (!requireNamespace(\"artMS\", quietly = TRUE)) BiocManager::install(\"artMS\",force = TRUE)\r\n\r\nlibrary(artMS)\r\n\r\n\r\n# Option to allow big files like .fasta files\r\noptions(shiny.maxRequestSize = 1000*1024^2)\r\n\r\nfunction(input, output, session) {\r\n  \r\n  observeEvent(input$generate_qc, {\r\n    req(input$evidencefile, input$keysfile)\r\n    output$output_text <- renderText(\"Working... Please Wait.\")\r\n    \r\n    delay(100, {\r\n      if (!input$qc_basic && !input$qc_ext) { \r\n        output$output_text <- renderText(\"No QC(s) selected\")\r\n        return()\r\n      }\r\n      \r\n      zip_and_download <- function(folder_name) {\r\n        zipfile <- paste0(folder_name, \".zip\")\r\n        zip(zipfile, files = folder_name)\r\n        downloadHandler(\r\n          filename = function() { zipfile },\r\n          content = function(file) { file.copy(zipfile, file) },\r\n          contentType = \"application/zip\"\r\n        )\r\n      }\r\n      \r\n      extract_zip <- function(zip_path) {\r\n        dir = dirname(zip_path)\r\n        unzip(zip_path, ex)\r\n        list.files(extract_to, full.names = TRUE)\r\n      }\r\n      \r\n      extracted_files <- extract_zip(input$evidencefile$datapath)\r\n      evidence_file_path <- extracted_files[grep(\"evidence.txt$\", extracted_files)]\r\n      \r\n      \r\n      if (input$qc_basic) {\r\n        print(evidence_file_path)\r\n        artmsQualityControlEvidenceBasic(\r\n          evidence_file = read.table(evidence_file_path, header = TRUE, sep = \"\\t\"),\r\n          keys_file = read.table(input$keysfile$datapath, header = TRUE, sep = \"\\t\"),\r\n          prot_exp = \"APMS\"\r\n        )\r\n        \r\n        output$download_basic <- zip_and_download(\"qc_basic\")\r\n        output$download_ui_basic <- renderUI({\r\n          downloadButton(\"download_basic\", \"Download Basic QC\")\r\n        })\r\n      }\r\n      \r\n      if (input$qc_ext) {\r\n        artmsQualityControlEvidenceExtended(\r\n          evidence_file = read.table(evidence_file_path, header = TRUE, sep = \"\\t\"),\r\n          keys_file = read.table(input$keysfile$datapath, header = TRUE, sep = \"\\t\"),\r\n          plotPCA = input$perform_pca\r\n        )\r\n        output$download_extended <- zip_and_download(\"qc_extended\")\r\n        output$download_ui_extended <- renderUI({\r\n          downloadButton(\"download_extended\", \"Download Extended QC\")\r\n        })\r\n      }\r\n      output$output_text <- renderText(\"Done.\")\r\n    })\r\n  })\r\n  \r\n  observeEvent(input$generate_SAINT, {\r\n    req(input$evidencefile, input$keysfile, input$ref)\r\n    output$output_text2 <- renderText(\"Working... Please Wait.\")\r\n    \r\n    delay(10, {\r\n      if (input$msspc) {\r\n        artmsEvidenceToSaintExpress(\r\n          evidence_file = input$evidencefile$datapath,\r\n          keys_file = input$keysfile$datapath,\r\n          ref_proteome_file = input$ref$datapath,\r\n          quant_variable = \"msspc\",\r\n          output_file = \"msspc.txt\"\r\n        )\r\n        output$download_ui2 <- renderUI({\r\n          tagList(\r\n            downloadButton(\"download_msspc_interactions\", \"Download msspc SAINT Interactions\"),\r\n            downloadButton(\"download_msspc_baits\", \"Download msspc SAINT Baits input file\"),\r\n            downloadButton(\"download_msspc_preys\", \"Download msspc SAINT Preys input file\")\r\n          )\r\n        })\r\n      }\r\n      if (input$msint) {\r\n        artmsEvidenceToSaintExpress(\r\n          evidence_file = input$evidencefile$datapath,\r\n          keys_file = input$keysfile$datapath,\r\n          ref_proteome_file = input$ref$datapath,\r\n          quant_variable = \"msint\",\r\n          output_file = \"msint.txt\"\r\n        )\r\n        output$download_ui2 <- renderUI({\r\n          tagList(\r\n            downloadButton(\"download_msint_interactions\", \"Download msint SAINT Interactions\"),\r\n            downloadButton(\"download_msint_baits\", \"Download msint SAINT Baits input file\"),\r\n            downloadButton(\"download_msint_preys\", \"Download msint SAINT Preys input file\")\r\n          )\r\n        })\r\n      }\r\n      \r\n      if (input$msint && input$msspc) {\r\n        artmsEvidenceToSaintExpress(\r\n          evidence_file = input$evidencefile$datapath,\r\n          keys_file = input$keysfile$datapath,\r\n          ref_proteome_file = input$ref$datapath,\r\n          quant_variable = \"msspc\",\r\n          output_file = \"msspc.txt\"\r\n        )\r\n        \r\n        artmsEvidenceToSaintExpress(\r\n          evidence_file = input$evidencefile$datapath,\r\n          keys_file = input$keysfile$datapath,\r\n          ref_proteome_file = input$ref$datapath,\r\n          quant_variable = \"msint\",\r\n          output_file = \"msint.txt\"\r\n        )\r\n        output$download_ui2 <- renderUI({\r\n          tagList(\r\n            downloadButton(\"download_msspc_interactions\", \"Download msspc SAINT Interactions\"),\r\n            downloadButton(\"download_msspc_baits\", \"Download msspc SAINT Baits input file\"),\r\n            downloadButton(\"download_msspc_preys\", \"Download msspc SAINT Preys input file\"),\r\n            downloadButton(\"download_msint_interactions\", \"Download msint SAINT Interactions\"),\r\n            downloadButton(\"download_msint_baits\", \"Download msint SAINT Baits input file\"),\r\n            downloadButton(\"download_msint_preys\", \"Download msint SAINT Preys input file\")\r\n          )\r\n        })\r\n      }\r\n    })\r\n  })\r\n}","type":"text"},{"name":"ui.R","content":"library(shiny)\r\nlibrary(shinyjs)\r\n\r\n# Define UI for application\r\nfluidPage(\r\n  useShinyjs(), # Include shinyjs\r\n  titlePanel(\"QC and SAINT inputs generator\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      # Upload necessary files\r\n      fileInput(\"evidencefile\", \"Upload evidence.zip (evidence.txt need to be compressed to be uploaded in the website.\r\n                Please use local (main repository) version if the upload fails.)\", accept = c(\".zip\",\"7z\")),\r\n      fileInput(\"keysfile\", \"Upload keys.txt\", accept = c(\"text/plain\", \".txt\")),\r\n      fileInput(\"ref\", \"Upload Reference proteome\", accept = \".fasta\")\r\n    ),\r\n    mainPanel(\r\n      # Check if the users want to do basic, extended or both QC\r\n      checkboxInput(\"qc_basic\", \"QC_Basic\", value = TRUE),\r\n      checkboxInput(\"qc_ext\", \"QC_Extended\", value = FALSE),\r\n      conditionalPanel(\r\n        condition = \"input.qc_ext == true\",\r\n        checkboxInput(\"perform_pca\", \"Perform PCA (Might take a long time, be patient)\", value = FALSE)\r\n      ),\r\n      \r\n      # Button to generate QC and message confirming the work is in progress\r\n      actionButton(\"generate_qc\", \"Generate QC(s)\"),\r\n      textOutput(\"output_text\"),\r\n      \r\n      # UI for downloading QCs\r\n      uiOutput(\"download_ui_basic\"),\r\n      uiOutput(\"download_ui_extended\"),\r\n      \r\n      # Check boxes to generate input files for SAINTexpress in spectral count or intensity\r\n      checkboxInput(\"msspc\", \"msspc\", value = TRUE),\r\n      checkboxInput(\"msint\", \"msint\", value = FALSE),\r\n      \r\n      # Generate the files \r\n      actionButton(\"generate_SAINT\", \"Generate SAINTexpress input files\"),\r\n      textOutput(\"output_text2\"),\r\n      \r\n      # Download the files\r\n      uiOutput(\"download_ui2\")\r\n    )\r\n  )\r\n)\r\n","type":"text"}]
